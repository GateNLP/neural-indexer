input {
    rabbitmq {
        host => ["${RABBITMQ_HOSTS}"]
        user => "${RABBITMQ_USERNAME}"
        password => "${RABBITMQ_PASSWORD}"
        queue => "to_embed"
        durable => true
        passive => true

        ack => true
    }
}

filter {
    http {
        url => "${JINA_GATEWAY_URL}/embed"
        body => {
            "data" => [
                {
                    "text" => "%{[text]}"
                }
            ]
        }
        body_format => "json"
        verb => "POST"
        pool_max => 1
        pool_max_per_route => 1
        target_body => "jina_response_body"
        target_headers => "jina_response_headers"
        connect_timeout => 30
        socket_timeout => 30
    }

    mutate {
        rename => {
            "[jina_response_body][data][0][embedding]" => "embedding"
            "@timestamp" => "processed_by_embedder_at"
        }

        add_field => {
            "embedding_version" => "${EMBEDDING_VERSION}"
        }
    }

    mutate {
        remove_field => ["jina_response_body", "jina_response_headers", "@version", "event"]
        remove_tag => ["for_queue"]
    }
}

output {
    elasticsearch {
        hosts => "${ELASTICSEARCH_HOSTS}"
        cacert => '/usr/share/logstash/certs/ca/ca.crt'
        user => "${ELASTICSEARCH_USERNAME}"
        password => "${ELASTICSEARCH_PASSWORD}"

        document_id => "%{[doc_id]}"
        index => "${ELASTIC_INDEX}"
        action => "update"
    }

    # TODO: handle _httprequestfailure tag
}