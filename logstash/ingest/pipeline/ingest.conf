# This pipeline is based on the tweet collector pipeline by Mark Greenwood
# It has been adapted by Freddy Heppell for the multilang tweet collector
# The original changelog is preserved below:
# Updated by MAG 20210608
#  - for retweets text of the retweet goes into tweet_text not the truncated text in the new tweet
#    this is achieved by moving the processing of retweets to after the processing of the tweet
#    and replacing the tweet_text field.
#  - added retweet_of_id, retweet_retweet_count, retweet_favorite_count, retweet_quote_count
#  - remove the original JSON as it's not accessiable and if we need to reprocess we'll go from the orig files
#
# Updated by MAG 20210714
# - explicitly force the action to be "create". this should ensure that even if logstash goes crazy
#   and starts pushing documents twice, the second version will be ignored (and an error thrown) which
#   means that we won't loose extra info added to the document since it was initially indexed

input {
    file {
        check_archive_validity => true
        path => ["/ingest/**/*.json.gz"]
        mode => "read"
        tags => ["covid_multilang"]
        sincedb_clean_after => "365 d"
        file_completed_action => "log_and_delete"
        file_completed_log_path => "/usr/share/logstash/data/completed.log"
    }
}

filter {
    json {
        source => "message"
    }

    mutate {
        remove_field => ["contributors", "current_user_retweet", "favorited",
                        "filter_level", "geo", "id", "possibly_sensitive",
                        "scopes", "retweeted", "source",
                        "truncated", "withheld_copyright", "withheld_in_countries",
                        "withheld_scope"]
    }

    if([quoted_status]) {
        mutate {
            add_field => {
            "is_a_quote" => true
            }
        }
        if ([quoted_status][extended_tweet]){
            mutate {
            add_field => {
                "quoted_tweet_text" => "%{[quoted_status][extended_tweet][full_text]}"
            }
            }
        }
        else {
            mutate {
            add_field => {
                "quoted_tweet_text" => "%{[quoted_status][text]}"
            }
            }
        }
    }
    else {
        mutate {
            add_field => {
            "is_a_quote" => false
            }
        }
    }

    if([extended_tweet]) {
        ruby {
            code => '
            hashtags = []
            user_mentions_id = []
            user_mentions_pseudo = []
            urls = []
            event.get("[extended_tweet][entities][hashtags]").each do |hashtag|
                hashtags << hashtag["text"].downcase
            end
            event.get("[extended_tweet][entities][user_mentions]").each do |user_mention|
                user_mentions_id << user_mention["id_str"]
                user_mentions_pseudo << user_mention["screen_name"]
            end
            event.get("[extended_tweet][entities][urls]").each do |url|
                urls << url["expanded_url"]
            end
            event.set("hashtags", hashtags) if hashtags.any?
            event.set("user_mentions_id", user_mentions_id) if user_mentions_id.any?
            event.set("user_mentions_pseudo", user_mentions_pseudo) if user_mentions_pseudo.any?
            event.set("urls", urls) if urls.any?
            '
        }
        mutate {
            add_field => {
            "tweet_text" => "%{[extended_tweet][full_text]}"
            }
        }
    }
    else {
        ruby {
            code => '
            hashtags = []
            user_mentions_id = []
            user_mentions_pseudo = []
            urls = []
            event.get("[entities][hashtags]").each do |hashtag|
                hashtags << hashtag["text"].downcase
            end
            event.get("[entities][user_mentions]").each do |user_mention|
                user_mentions_id << user_mention["id_str"]
                user_mentions_pseudo << user_mention["screen_name"]
            end
            event.get("[entities][urls]").each do |url|
                urls << url["expanded_url"]
            end
            event.set("hashtags", hashtags) if hashtags.any?
            event.set("user_mentions_id", user_mentions_id) if user_mentions_id.any?
            event.set("user_mentions_pseudo", user_mentions_pseudo) if user_mentions_pseudo.any?
            event.set("urls", urls) if urls.any?
            '
        }
        mutate {
            add_field => {
                "tweet_text" => "%{[text]}"
            }
        }
    }

    if([retweeted_status]) {
        mutate {
            add_field => {
                "is_a_retweet" => true
                "retweet_of_id" => "%{[retweeted_status][id_str]}"
                "retweet_retweet_count" => "%{[retweeted_status][retweet_count]}"
                "retweet_favorite_count" => "%{[retweeted_status][favorite_count]}"
                "retweet_quote_count" => "%{[retweeted_status][quote_count]}"
            }
        }
            
        if ([retweeted_status][extended_tweet]) {
            mutate {
                replace => {
                    "tweet_text" => "%{[retweeted_status][extended_tweet][full_text]}"
                }
            }
        }
        else {
            mutate {
                replace => {
                    "tweet_text" => "%{[retweeted_status][text]}"
                }
            }
        }
    }
    else {
        mutate {
            add_field => {
                "is_a_retweet" => false
            }
        }
    }

    date {
        match => ["[created_at]", "EEE MMM dd HH:mm:ss Z yyyy"]
        target => "tweet_created_at"
    }

    date {
        match => [ "[user][created_at]", "EEE MMM dd HH:mm:ss Z yyyy" ]
        target => "author_account_creation"
    }

    ruby {
        code => '
            event.set("tweet_lang", event.get("[lang]")) if event.get("[lang]")
            event.set("author_location", event.get("[user][location]")) if event.get("[user][location]")
            event.set("author_description", event.get("[user][description]")) if event.get("[user][description]")
            event.set("author_lang", event.get("[user][lang]")) if event.get("[user][lang]")
            event.set("tweet_coordinates", event.get("[coordinates][coordinates]")) if !event.get("[coordinates][coordinates]").nil?
            event.set("in_reply_to_status_id", event.get("[in_reply_to_status_id_str]")) if !event.get("[in_reply_to_status_id_str]").nil?
            event.set("in_reply_to_user_id", event.get("[in_reply_to_user_id_str]")) if !event.get("[in_reply_to_user_id_str]").nil?
            event.set("in_reply_to_screen_name", event.get("[in_reply_to_screen_name]")) if !event.get("[in_reply_to_screen_name]").nil?
        '
    }

    mutate {
        rename => {
            "[id_str]" =>  "tweet_id"
            "[user][id_str]" => "author_id"
            "[user][screen_name]" => "author_screen_name"
            "[user][name]" => "author_name"
            "[user][verified]" => "author_verified"
            "[user][followers_count]" => "author_followers_count"
            "[user][friends_count]" => "author_friends_count"
            "[user][protected]" => "is_author_protected"
            "@timestamp" => "processed_by_logstash_at"
        }
    }

    mutate {
        convert => {
            "author_followers_count" => "integer"
            "author_friends_count" => "integer"
        }
    }

    mutate {
        rename => { "author_followers_count" => "[author][author_followers_count]" }
        rename => { "author_friends_count" => "[author][author_friends_count]" }
        rename => { "author_verified" => "[author][is_author_verified]" }
        rename => { "author_protected" => "[author][is_author_protected]" }
        rename => { "author_id" => "[author][author_id]" }
        rename => { "author_screen_name" => "[author][screen_name]" }
        rename => { "author_name" => "[author][author_name]" }
        rename => { "author_location" => "[author][author_location]" }
        rename => { "author_account_creation" => "[author][author_account_creation]" }
        rename => { "author_description" => "[author][author_description]" }
        rename => { "author_lang" => "[author][author_lang]" }
    }

    mutate {
        remove_field => ["original_author_followers_count", "original_author_friends_count",
                        "is_original_author_verified", "is_original_author_protected", "original_author_id",
                        "original_author_pseudo", "original_author_name", "original_author_location",
                        "original_author_account_creation", "original_author_description", "original_author_lang",
                        "truncated", "user", "@version", "timestamp_ms", "retweeted_status", "quoted_status",
                        "is_quote_status", "extended_entities", "extended_tweet", "entities", "reply_count",
                        "in_reply_to_status_id_str", "place", "display_text_range", "in_reply_to_user_id_str",
                        "type", "author_followers_count", "author_friends_count", "quote_count", "reply_to_pseudo",
                        "is_author_verified", "is_author_protected", "author_pseudo", "author_name",
                        "author_location", "author_account_creation", "author_description", "author_lang",
                        "rest", "author_id","lang", "original_reply_to_pseudo", "original_reply_to_tweet",
                        "original_reply_to_user_id","text", "created_at", "coordinates","message", "event", "host"]
    }

    clone {
        clones => ["for_queue"]
    }

    if "for_queue" in [tags] {
        prune {
            whitelist_names => ["tweet_id", "processed_by_logstash_at", "^tweet_text$", "^tags$"]
        }
    }
}

output {
    if "for_queue" in [tags] {
        rabbitmq {
            host => ["${RABBITMQ_HOSTS}"]
            user => "${RABBITMQ_USERNAME}"
            password => "${RABBITMQ_PASSWORD}"
            key => "to_embed"
            exchange => ""
            exchange_type => "direct"
        }
    } else {
        elasticsearch {
            hosts => "${ELASTICSEARCH_HOSTS}"
            cacert => '/usr/share/logstash/certs/ca/ca.crt'
            user => "${ELASTICSEARCH_USERNAME}"
            password => "${ELASTICSEARCH_PASSWORD}"

            document_id => "%{[tweet_id]}"
            index => "${ELASTIC_INDEX}"
            action => "create"
        }
    }
}
