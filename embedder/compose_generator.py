"""Script to automatically generate the embedder's docker-compose override files."""

import argparse
import os
import tempfile

import flow
import yaml

parser = argparse.ArgumentParser(description="Generate Jina docker-compose file.")
parser.add_argument("compose_name", help="Name of the compose file to output")
parser.add_argument(
    "--gpu",
    "-g",
    help="Use GPUs for inference instead of CPU",
    default=False,
    action="store_true",
)
parser.add_argument(
    "--replicas",
    "-r",
    help="The number of embedder replicas to use",
    default=1,
    type=int,
)
parser.add_argument(
    "--network-name", "-n", help="Docker network name", default="default"
)

args = parser.parse_args()


if args.gpu:
    embedder_additional_uses_with = {"device": "cuda"}
    # ${EXECUTOR_GPUS} will be resolved by Docker Compose
    embedder_additional_args = {"gpus": "${EXECUTOR_GPUS}"}
    executor_suffix = "-gpu"
else:
    embedder_additional_uses_with = {}
    embedder_additional_args = {}
    executor_suffix = ""

f = flow.generate_flow(
    executor_suffix,
    embedder_additional_uses_with,
    args.replicas,
    embedder_additional_args,
)


# this is not a docker-compose file of honour
warning = [
    "DO NOT MODIFY - AUTOMATICALLY GENERATED FILE",
    "",
    "Generated by `compose_generator.py` with args:",
    *[" --{} {}".format(*arg) for arg in vars(args).items()],
]

compose_filename = "embedder-{}.yml".format(args.compose_name)

# Jina's .to_docker_compose_yaml is impolite and insists on outputting to a file...
# so we'll output to the system temp directory
temp_path = os.path.join(tempfile.gettempdir(), compose_filename)
f.to_docker_compose_yaml(output_path=temp_path, network_name=args.network_name)

# and open a new file to write our output to
final_path = os.path.join(os.path.dirname(__file__), compose_filename)

with open(temp_path, "r") as in_f, open(final_path, "w") as out_f:
    original_compose = yaml.safe_load(in_f)

    # Since this file is going to be an override, we only need the services
    # and a definition for the huggingface cache volume
    compose = {
        "services": original_compose["services"],
        "volumes": {"huggingface": {"driver": "local"}},
    }

    # Create a list of Prometheus endpoints to watch
    service_monitoring_hosts = []
    for service_name, service in compose["services"].items():
        # Currently this is always 9090 or 9091 but better safe than sorry
        monitoring_port = list(
            filter(lambda p: 9000 <= int(p) <= 9999, service["expose"])
        )

        assert (
            len(monitoring_port) == 1
        ), "Service {} has more than one possible monitoring port: {}".format(
            service_name, ",".join(monitoring_port)
        )

        service_monitoring_hosts.append(
            "http://{}:{}".format(service_name, monitoring_port[0])
        )

    # Add Jina containers to logstashembed's dependencies
    compose["services"]["logstashembed"] = {
        "depends_on": {
            service: {"condition": "service_healthy"} for service in compose["services"]
        }
    }

    # Tell metricbeat the hosts of the Jina containers
    compose["services"]["metricbeat"] = {
        "environment": ["JINA_HOSTS=[{}]".format(", ".join(service_monitoring_hosts))]
    }

    # And now output our new compose file with warning
    guard = "#" + ("=" * (len(max(warning, key=len)) + 2)) + "\n"
    out_f.write(guard)
    out_f.write("".join("# {} \n".format(line) for line in warning))
    out_f.write(guard + "\n\n")
    yaml.dump(compose, out_f)
